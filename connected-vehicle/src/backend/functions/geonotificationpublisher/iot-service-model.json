{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2015-05-28",
    "endpointPrefix":"iot",
    "serviceFullName":"AWS IoT Control Plane",
    "signatureVersion":"v4",
    "signingName":"execute-api",
    "protocol":"rest-json"
  },
  "operations":{
    "AddLoggingRole":{
      "name":"AddLoggingRole",
      "http":{
        "method":"POST",
        "requestUri":"/loggingRole"
      },
      "input":{"shape":"AddLoggingRoleRequest"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Add a Role ARN to enable IoT to log information to caller's CloudWatch account."
    },
    "AttachPrincipalPolicy":{
      "name":"AttachPrincipalPolicy",
      "http":{
        "method":"PUT",
        "requestUri":"/principal-policies/{policyName}"
      },
      "input":{"shape":"AttachPrincipalPolicyRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "AttachThingPrincipal":{
      "name":"AttachThingPrincipal",
      "http":{
        "method":"PUT",
        "requestUri":"/things/{thingName}/principals"
      },
      "input":{"shape":"AttachThingPrincipalRequest"},
      "output":{"shape":"AttachThingPrincipalResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CancelCertificateTransfer":{
      "name":"CancelCertificateTransfer",
      "http":{
        "method":"PATCH",
        "requestUri":"/cancel-certificate-transfer/{certificateId}"
      },
      "input":{"shape":"CancelCertificateTransferRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"TransferAlreadyCompletedException",
          "error":{"httpStatusCode":410},
          "exception":true,
          "documentation":"Exception indicating a certificate transfer may not reverted since it has already been completed."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CreateCertificateFromCsr":{
      "name":"CreateCertificateFromCsr",
      "http":{
        "method":"POST",
        "requestUri":"/certificates"
      },
      "input":{"shape":"CreateCertificateFromCsrRequest"},
      "output":{"shape":"CreateCertificateFromCsrResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CreateKeysAndCertificate":{
      "name":"CreateKeysAndCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/keys-and-certificate"
      },
      "input":{"shape":"CreateKeysAndCertificateRequest"},
      "output":{"shape":"CreateKeysAndCertificateResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CreatePolicy":{
      "name":"CreatePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/policies/{policyName}"
      },
      "input":{"shape":"CreatePolicyRequest"},
      "output":{"shape":"CreatePolicyResponse"},
      "errors":[
        {
          "shape":"ResourceAlreadyExistsException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown when a request resource already exists."
        },
        {
          "shape":"MalformedPolicyException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if the policy document does not validate a propen Aspen policy document."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CreatePolicyVersion":{
      "name":"CreatePolicyVersion",
      "http":{
        "method":"POST",
        "requestUri":"/policies/{policyName}/version"
      },
      "input":{"shape":"CreatePolicyVersionRequest"},
      "output":{"shape":"CreatePolicyVersionResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"MalformedPolicyException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if the policy document does not validate a propen Aspen policy document."
        },
        {
          "shape":"VersionsLimitExceededException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown if the number of versions of policy exceeds a limit."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "CreateThing":{
      "name":"CreateThing",
      "http":{
        "method":"POST",
        "requestUri":"/things/{thingName}"
      },
      "input":{"shape":"CreateThingRequest"},
      "output":{"shape":"CreateThingResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        },
        {
          "shape":"ResourceAlreadyExistsException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown when a request resource already exists."
        }
      ]
    },
    "CreateTopicRule":{
      "name":"CreateTopicRule",
      "http":{
        "method":"POST",
        "requestUri":"/rules/{ruleName}"
      },
      "input":{"shape":"CreateTopicRuleRequest"},
      "errors":[
        {
          "shape":"SqlParseException",
          "error":{"httpStatusCode":509},
          "exception":true,
          "documentation":"This exception is thrown when a Rule-SQL expression does not parse correctly."
        },
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Create a MQTT topic rule."
    },
    "DeleteCertificate":{
      "name":"DeleteCertificate",
      "http":{
        "method":"DELETE",
        "requestUri":"/certificates/{certificateId}"
      },
      "input":{"shape":"DeleteCertificateRequest"},
      "errors":[
        {
          "shape":"DeleteConflictException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown if the there is an attempt to delete a resource that is attached to one or more resource."
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"CertificateStateException",
          "error":{"httpStatusCode":406},
          "exception":true,
          "documentation":"Exception indicating a certificate operation has been invoked an illegal time."
        }
      ]
    },
    "DeleteLoggingRole":{
      "name":"DeleteLoggingRole",
      "http":{
        "method":"DELETE",
        "requestUri":"/loggingRole"
      },
      "input":{"shape":"DeleteLoggingRoleRequest"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Delete an existing customer role used for logging."
    },
    "DeletePolicy":{
      "name":"DeletePolicy",
      "http":{
        "method":"DELETE",
        "requestUri":"/policies/{policyName}"
      },
      "input":{"shape":"DeletePolicyRequest"},
      "errors":[
        {
          "shape":"DeleteConflictException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown if the there is an attempt to delete a resource that is attached to one or more resource."
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "DeletePolicyVersion":{
      "name":"DeletePolicyVersion",
      "http":{
        "method":"DELETE",
        "requestUri":"/policies/{policyName}/version/{policyVersionId}"
      },
      "input":{"shape":"DeletePolicyVersionRequest"},
      "errors":[
        {
          "shape":"DeleteConflictException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Thrown if the there is an attempt to delete a resource that is attached to one or more resource."
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "DeleteThing":{
      "name":"DeleteThing",
      "http":{
        "method":"DELETE",
        "requestUri":"/things/{thingName}"
      },
      "input":{"shape":"DeleteThingRequest"},
      "output":{"shape":"DeleteThingResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "DeleteTopicRule":{
      "name":"DeleteTopicRule",
      "http":{
        "method":"DELETE",
        "requestUri":"/rules/{ruleName}"
      },
      "input":{"shape":"DeleteTopicRuleRequest"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Delete an existing topic rule by Rule Name."
    },
    "DescribeCertificate":{
      "name":"DescribeCertificate",
      "http":{
        "method":"GET",
        "requestUri":"/certificates/{certificateId}"
      },
      "input":{"shape":"DescribeCertificateRequest"},
      "output":{"shape":"DescribeCertificateResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        }
      ]
    },
    "DescribeThing":{
      "name":"DescribeThing",
      "http":{
        "method":"GET",
        "requestUri":"/things/{thingName}"
      },
      "input":{"shape":"DescribeThingRequest"},
      "output":{"shape":"DescribeThingResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "DetachPrincipalPolicy":{
      "name":"DetachPrincipalPolicy",
      "http":{
        "method":"DELETE",
        "requestUri":"/principal-policies/{policyName}"
      },
      "input":{"shape":"DetachPrincipalPolicyRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "DetachThingPrincipal":{
      "name":"DetachThingPrincipal",
      "http":{
        "method":"DELETE",
        "requestUri":"/things/{thingName}/principals"
      },
      "input":{"shape":"DetachThingPrincipalRequest"},
      "output":{"shape":"DetachThingPrincipalResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "GetLoggingRole":{
      "name":"GetLoggingRole",
      "http":{
        "method":"GET",
        "requestUri":"/loggingRole"
      },
      "input":{"shape":"GetLoggingRoleRequest"},
      "output":{"shape":"GetLoggingRoleResponse"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Add a customer role for logging information."
    },
    "GetPolicy":{
      "name":"GetPolicy",
      "http":{
        "method":"GET",
        "requestUri":"/policies/{policyName}"
      },
      "input":{"shape":"GetPolicyRequest"},
      "output":{"shape":"GetPolicyResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "GetPolicyVersion":{
      "name":"GetPolicyVersion",
      "http":{
        "method":"GET",
        "requestUri":"/policies/{policyName}/version/{policyVersionId}"
      },
      "input":{"shape":"GetPolicyVersionRequest"},
      "output":{"shape":"GetPolicyVersionResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "GetTopicRule":{
      "name":"GetTopicRule",
      "http":{
        "method":"GET",
        "requestUri":"/rules/{ruleName}"
      },
      "input":{"shape":"GetTopicRuleRequest"},
      "output":{"shape":"GetTopicRuleResponse"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Retrieve information about a specific MQTT topic rule by Rule Name."
    },
    "ListCertificates":{
      "name":"ListCertificates",
      "http":{
        "method":"GET",
        "requestUri":"/certificates"
      },
      "input":{"shape":"ListCertificatesRequest"},
      "output":{"shape":"ListCertificatesResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListPolicies":{
      "name":"ListPolicies",
      "http":{
        "method":"GET",
        "requestUri":"/policies"
      },
      "input":{"shape":"ListPoliciesRequest"},
      "output":{"shape":"ListPoliciesResponse"}
    },
    "ListPolicyVersions":{
      "name":"ListPolicyVersions",
      "http":{
        "method":"GET",
        "requestUri":"/policies/{policyName}/version"
      },
      "input":{"shape":"ListPolicyVersionsRequest"},
      "output":{"shape":"ListPolicyVersionsResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListPrincipalPolicies":{
      "name":"ListPrincipalPolicies",
      "http":{
        "method":"GET",
        "requestUri":"/principal-policies"
      },
      "input":{"shape":"ListPrincipalPoliciesRequest"},
      "output":{"shape":"ListPrincipalPoliciesResponse"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListPrincipalThings":{
      "name":"ListPrincipalThings",
      "http":{
        "method":"GET",
        "requestUri":"/principals/things"
      },
      "input":{"shape":"ListPrincipalThingsRequest"},
      "output":{"shape":"ListPrincipalThingsResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListThingPrincipals":{
      "name":"ListThingPrincipals",
      "http":{
        "method":"GET",
        "requestUri":"/things/{thingName}/principals"
      },
      "input":{"shape":"ListThingPrincipalsRequest"},
      "output":{"shape":"ListThingPrincipalsResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListThings":{
      "name":"ListThings",
      "http":{
        "method":"GET",
        "requestUri":"/things"
      },
      "input":{"shape":"ListThingsRequest"},
      "output":{"shape":"ListThingsResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ListTopicRules":{
      "name":"ListTopicRules",
      "http":{
        "method":"GET",
        "requestUri":"/rules"
      },
      "input":{"shape":"ListTopicRulesRequest"},
      "output":{"shape":"ListTopicRulesResponse"},
      "errors":[
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Lists all the rules on the user's account by topic (eg., foo/bar)."
    },
    "RejectCertificateTransfer":{
      "name":"RejectCertificateTransfer",
      "http":{
        "method":"PATCH",
        "requestUri":"/reject-certificate-transfer/{certificateId}"
      },
      "input":{"shape":"RejectCertificateTransferRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"TransferAlreadyCompletedException",
          "error":{"httpStatusCode":410},
          "exception":true,
          "documentation":"Exception indicating a certificate transfer may not reverted since it has already been completed."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "ReplaceTopicRule":{
      "name":"ReplaceTopicRule",
      "http":{
        "method":"PATCH",
        "requestUri":"/rules/{ruleName}"
      },
      "input":{"shape":"ReplaceTopicRuleRequest"},
      "errors":[
        {
          "shape":"SqlParseException",
          "error":{"httpStatusCode":509},
          "exception":true,
          "documentation":"This exception is thrown when a Rule-SQL expression does not parse correctly."
        },
        {
          "shape":"InternalException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        }
      ],
      "documentation":"Replace an existing topic rule by a new rule. The new rule must be specified fully with all parameters."
    },
    "SetDefaultPolicyVersion":{
      "name":"SetDefaultPolicyVersion",
      "http":{
        "method":"PATCH",
        "requestUri":"/policies/{policyName}/version/{policyVersionId}"
      },
      "input":{"shape":"SetDefaultPolicyVersionRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "TransferCertificate":{
      "name":"TransferCertificate",
      "http":{
        "method":"PATCH",
        "requestUri":"/transfer-certificate/{certificateId}"
      },
      "input":{"shape":"TransferCertificateRequest"},
      "output":{"shape":"TransferCertificateResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"CertificateStateException",
          "error":{"httpStatusCode":406},
          "exception":true,
          "documentation":"Exception indicating a certificate operation has been invoked an illegal time."
        },
        {
          "shape":"TransferConflictException",
          "error":{"httpStatusCode":409},
          "exception":true,
          "documentation":"Exception indicating a certificate transfer may not be initiated as authorization policies are still attached."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "UpdateCertificate":{
      "name":"UpdateCertificate",
      "http":{
        "method":"PUT",
        "requestUri":"/certificates/{certificateId}"
      },
      "input":{"shape":"UpdateCertificateRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        },
        {
          "shape":"CertificateStateException",
          "error":{"httpStatusCode":406},
          "exception":true,
          "documentation":"Exception indicating a certificate operation has been invoked an illegal time."
        },
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        }
      ]
    },
    "UpdateThing":{
      "name":"UpdateThing",
      "http":{
        "method":"PATCH",
        "requestUri":"/things/{thingName}"
      },
      "input":{"shape":"UpdateThingRequest"},
      "output":{"shape":"UpdateThingResponse"},
      "errors":[
        {
          "shape":"InvalidRequestException",
          "error":{"httpStatusCode":400},
          "exception":true,
          "documentation":"Thrown if a client made a bad request."
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":429},
          "exception":true,
          "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
        },
        {
          "shape":"UnauthorizedException",
          "error":{"httpStatusCode":401},
          "exception":true,
          "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":503},
          "exception":true,
          "fault":true,
          "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
        },
        {
          "shape":"InternalFailureException",
          "error":{"httpStatusCode":500},
          "exception":true,
          "fault":true,
          "documentation":"Thrown if an unexpected error occurs"
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true,
          "documentation":"Thrown when a request resource was not found or does not exist."
        }
      ]
    }
  },
  "shapes":{
    "Action":{
      "type":"structure",
      "members":{
        "dynamoDB":{"shape":"DynamoDBAction"},
        "lambda":{"shape":"LambdaAction"},
        "sns":{"shape":"SnsAction"},
        "sqs":{"shape":"SqsAction"},
        "kinesis":{"shape":"KinesisAction"},
        "republish":{"shape":"RepublishAction"},
        "s3":{"shape":"S3Action"}
      }
    },
    "ActionList":{
      "type":"list",
      "member":{"shape":"Action"}
    },
    "AddLoggingRoleRequest":{
      "type":"structure",
      "members":{
        "loggingRolePayload":{"shape":"LoggingRolePayload"}
      },
      "payload":"loggingRolePayload"
    },
    "AscendingOrder":{"type":"boolean"},
    "AttachPrincipalPolicyRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "principal"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "principal":{
          "shape":"Principal",
          "location":"header",
          "locationName":"x-amzn-iot-principal"
        }
      }
    },
    "AttachThingPrincipalRequest":{
      "type":"structure",
      "required":[
        "thingName",
        "principal"
      ],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        },
        "principal":{
          "shape":"PrincipalArn",
          "location":"header",
          "locationName":"x-amzn-principal-arn"
        }
      }
    },
    "AttachThingPrincipalResponse":{
      "type":"structure",
      "members":{
      }
    },
    "AttributeName":{"type":"string"},
    "AttributePayload":{
      "type":"structure",
      "members":{
        "attributes":{"shape":"Attributes"}
      }
    },
    "AttributeValue":{"type":"string"},
    "Attributes":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "AwsAccountId":{
      "type":"string",
      "pattern":"[0-9]{12}"
    },
    "AwsArn":{"type":"string"},
    "BucketName":{"type":"string"},
    "CancelCertificateTransferRequest":{
      "type":"structure",
      "required":["certificateId"],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        }
      }
    },
    "CertificateArn":{
      "type":"string",
      "pattern":"arn:aws:iot:[a-z]{2}-[a-z]{4}-\\d{1}:\\d{12}:cert/?(0x)?[a-fA-F0-9]+"
    },
    "CertificateDescription":{
      "type":"structure",
      "members":{
        "certificateArn":{"shape":"CertificateArn"},
        "certificateId":{"shape":"CertificateId"},
        "status":{"shape":"CertificateStatus"},
        "certificatePem":{"shape":"CertificatePem"},
        "ownedBy":{"shape":"AwsAccountId"},
        "creationDate":{"shape":"DateType"},
        "lastModifiedDate":{"shape":"DateType"}
      }
    },
    "CertificateDescriptions":{
      "type":"list",
      "member":{"shape":"CertificateDescription"}
    },
    "CertificateId":{
      "type":"string",
      "pattern":"(0x)?[a-fA-F0-9]+"
    },
    "CertificatePem":{"type":"string"},
    "CertificateSigningRequest":{
      "type":"string",
      "min":1
    },
    "CertificateStateException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":406},
      "exception":true,
      "documentation":"Exception indicating a certificate operation has been invoked an illegal time."
    },
    "CertificateStatus":{
      "type":"string",
      "enum":[
        "ACTIVE",
        "INACTIVE",
        "REVOKED",
        "PENDING_TRANSFER"
      ]
    },
    "ClientId":{"type":"string"},
    "CreateCertificateFromCsrRequest":{
      "type":"structure",
      "required":["certificateSigningRequest"],
      "members":{
        "certificateSigningRequest":{"shape":"CertificateSigningRequest"},
        "setAsActive":{
          "shape":"SetAsActive",
          "location":"querystring",
          "locationName":"setAsActive"
        }
      }
    },
    "CreateCertificateFromCsrResponse":{
      "type":"structure",
      "members":{
        "certificateArn":{"shape":"CertificateArn"},
        "certificateId":{"shape":"CertificateId"},
        "certificatePem":{"shape":"CertificatePem"}
      }
    },
    "CreateKeysAndCertificateRequest":{
      "type":"structure",
      "members":{
        "setAsActive":{
          "shape":"SetAsActive",
          "location":"querystring",
          "locationName":"setAsActive"
        }
      }
    },
    "CreateKeysAndCertificateResponse":{
      "type":"structure",
      "members":{
        "certificateArn":{"shape":"CertificateArn"},
        "certificateId":{"shape":"CertificateId"},
        "certificatePem":{"shape":"CertificatePem"},
        "keyPair":{"shape":"KeyPair"}
      }
    },
    "CreatePolicyRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "policyDocument"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "policyDocument":{"shape":"PolicyDocument"}
      }
    },
    "CreatePolicyResponse":{
      "type":"structure",
      "members":{
        "policyName":{"shape":"PolicyName"},
        "policyArn":{"shape":"PolicyArn"},
        "policyDocument":{"shape":"PolicyDocument"},
        "policyVersionId":{"shape":"PolicyVersionId"}
      }
    },
    "CreatePolicyVersionRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "policyDocument"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "policyDocument":{"shape":"PolicyDocument"},
        "setAsDefault":{
          "shape":"SetAsDefault",
          "location":"querystring",
          "locationName":"setAsDefault"
        }
      }
    },
    "CreatePolicyVersionResponse":{
      "type":"structure",
      "members":{
        "policyArn":{"shape":"PolicyArn"},
        "policyDocument":{"shape":"PolicyDocument"},
        "policyVersionId":{"shape":"PolicyVersionId"}
      }
    },
    "CreateThingRequest":{
      "type":"structure",
      "required":["thingName"],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        },
        "attributePayload":{"shape":"AttributePayload"}
      },
      "payload":"attributePayload"
    },
    "CreateThingResponse":{
      "type":"structure",
      "members":{
        "thingName":{"shape":"ThingName"},
        "thingArn":{"shape":"ThingArn"}
      }
    },
    "CreateTopicRuleRequest":{
      "type":"structure",
      "required":[
        "ruleName",
        "topicRulePayload"
      ],
      "members":{
        "ruleName":{
          "shape":"RuleName",
          "location":"uri",
          "locationName":"ruleName"
        },
        "topicRulePayload":{"shape":"TopicRulePayload"}
      },
      "payload":"topicRulePayload"
    },
    "CreatedAtDate":{"type":"timestamp"},
    "DateType":{"type":"timestamp"},
    "DeleteCertificateRequest":{
      "type":"structure",
      "required":["certificateId"],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        }
      }
    },
    "DeleteConflictException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true,
      "documentation":"Thrown if the there is an attempt to delete a resource that is attached to one or more resource."
    },
    "DeleteLoggingRoleRequest":{
      "type":"structure",
      "members":{
      }
    },
    "DeletePolicyRequest":{
      "type":"structure",
      "required":["policyName"],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        }
      }
    },
    "DeletePolicyVersionRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "policyVersionId"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "policyVersionId":{
          "shape":"PolicyVersionId",
          "location":"uri",
          "locationName":"policyVersionId"
        }
      }
    },
    "DeleteThingRequest":{
      "type":"structure",
      "required":["thingName"],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        }
      }
    },
    "DeleteThingResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteTopicRuleRequest":{
      "type":"structure",
      "members":{
        "ruleName":{
          "shape":"RuleName",
          "location":"uri",
          "locationName":"ruleName"
        }
      },
      "required":["ruleName"]
    },
    "DescribeCertificateRequest":{
      "type":"structure",
      "required":["certificateId"],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        }
      }
    },
    "DescribeCertificateResponse":{
      "type":"structure",
      "members":{
        "certificateDescription":{"shape":"CertificateDescription"}
      }
    },
    "DescribeThingRequest":{
      "type":"structure",
      "required":["thingName"],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        }
      }
    },
    "DescribeThingResponse":{
      "type":"structure",
      "members":{
        "defaultClientId":{"shape":"ClientId"},
        "thingName":{"shape":"ThingName"},
        "attributes":{"shape":"Attributes"}
      }
    },
    "Description":{"type":"string"},
    "DetachPrincipalPolicyRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "principal"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "principal":{
          "shape":"Principal",
          "location":"header",
          "locationName":"x-amzn-iot-principal"
        }
      }
    },
    "DetachThingPrincipalRequest":{
      "type":"structure",
      "required":[
        "thingName",
        "principal"
      ],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        },
        "principal":{
          "shape":"PrincipalArn",
          "location":"header",
          "locationName":"x-amzn-principal-arn"
        }
      }
    },
    "DetachThingPrincipalResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DynamoDBAction":{
      "type":"structure",
      "required":[
        "tableName",
        "roleArn"
      ],
      "members":{
        "tableName":{"shape":"TableName"},
        "roleArn":{"shape":"AwsArn"},
        "hashKeyField":{"shape":"HashKeyField"},
        "hashKeyValue":{"shape":"HashKeyValue"},
        "rangeKeyField":{"shape":"RangeKeyField"},
        "rangeKeyValue":{"shape":"RangeKeyValue"},
        "payloadField":{"shape":"PayloadField"}
      }
    },
    "DynamoDBFunctionConfig":{
      "type":"structure",
      "members":{
        "tableName":{"shape":"TableName"},
        "roleArn":{"shape":"AwsArn"}
      }
    },
    "FunctionConfig":{
      "type":"structure",
      "members":{
        "dynamoDB":{"shape":"DynamoDBFunctionConfig"}
      }
    },
    "FunctionConfigList":{
      "type":"list",
      "member":{"shape":"FunctionConfig"}
    },
    "FunctionName":{"type":"string"},
    "GetLoggingRoleRequest":{
      "type":"structure",
      "members":{
      }
    },
    "GetLoggingRoleResponse":{
      "type":"structure",
      "members":{
        "roleArn":{"shape":"AwsArn"}
      }
    },
    "GetPolicyRequest":{
      "type":"structure",
      "required":["policyName"],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        }
      }
    },
    "GetPolicyResponse":{
      "type":"structure",
      "members":{
        "policyName":{"shape":"PolicyName"},
        "policyArn":{"shape":"PolicyArn"},
        "policyDocument":{"shape":"PolicyDocument"},
        "defaultVersionId":{"shape":"PolicyVersionId"}
      }
    },
    "GetPolicyVersionRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "policyVersionId"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "policyVersionId":{
          "shape":"PolicyVersionId",
          "location":"uri",
          "locationName":"policyVersionId"
        }
      }
    },
    "GetPolicyVersionResponse":{
      "type":"structure",
      "members":{
        "policyArn":{"shape":"PolicyArn"},
        "policyName":{"shape":"PolicyName"},
        "policyDocument":{"shape":"PolicyDocument"},
        "policyVersionId":{"shape":"PolicyVersionId"}
      }
    },
    "GetTopicRuleRequest":{
      "type":"structure",
      "required":["ruleName"],
      "members":{
        "ruleName":{
          "shape":"RuleName",
          "location":"uri",
          "locationName":"ruleName"
        }
      }
    },
    "GetTopicRuleResponse":{
      "type":"structure",
      "members":{
        "rule":{"shape":"TopicRule"}
      }
    },
    "HashKeyField":{"type":"string"},
    "HashKeyValue":{"type":"string"},
    "InternalException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":500},
      "exception":true,
      "documentation":"Indicates an unexpected internal exception in GoldenEye Service."
    },
    "InternalFailureException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":500},
      "exception":true,
      "fault":true,
      "documentation":"Thrown if an unexpected error occurs"
    },
    "InvalidRequestException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true,
      "documentation":"Thrown if a client made a bad request."
    },
    "IsDefaultVersion":{"type":"boolean"},
    "IsDisabled":{"type":"boolean"},
    "Key":{"type":"string"},
    "KeyPair":{
      "type":"structure",
      "members":{
        "PublicKey":{"shape":"PublicKey"},
        "PrivateKey":{"shape":"PrivateKey"}
      }
    },
    "KinesisAction":{
      "type":"structure",
      "required":[
        "roleArn",
        "streamName"
      ],
      "members":{
        "roleArn":{"shape":"AwsArn"},
        "streamName":{"shape":"StreamName"},
        "partitionKey":{"shape":"PartitionKey"}
      }
    },
    "LambdaAction":{
      "type":"structure",
      "required":[
        "functionName",
        "roleArn"
      ],
      "members":{
        "functionName":{"shape":"FunctionName"},
        "roleArn":{"shape":"AwsArn"}
      }
    },
    "ListCertificatesRequest":{
      "type":"structure",
      "members":{
        "pageSize":{
          "shape":"PageSize",
          "location":"querystring",
          "locationName":"pageSize"
        },
        "marker":{
          "shape":"Marker",
          "location":"querystring",
          "locationName":"marker"
        },
        "ascendingOrder":{
          "shape":"AscendingOrder",
          "location":"querystring",
          "locationName":"isAscendingOrder"
        }
      }
    },
    "ListCertificatesResponse":{
      "type":"structure",
      "members":{
        "certificateDescriptions":{"shape":"CertificateDescriptions"},
        "nextMarker":{"shape":"Marker"}
      }
    },
    "ListPoliciesRequest":{
      "type":"structure",
      "members":{
        "marker":{
          "shape":"Marker",
          "location":"querystring",
          "locationName":"marker"
        },
        "pageSize":{
          "shape":"PageSize",
          "location":"querystring",
          "locationName":"pageSize"
        },
        "ascendingOrder":{
          "shape":"AscendingOrder",
          "location":"querystring",
          "locationName":"isAscendingOrder"
        }
      }
    },
    "ListPoliciesResponse":{
      "type":"structure",
      "members":{
        "policies":{"shape":"Policies"},
        "nextMarker":{"shape":"Marker"}
      }
    },
    "ListPolicyVersionsRequest":{
      "type":"structure",
      "required":["policyName"],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        }
      }
    },
    "ListPolicyVersionsResponse":{
      "type":"structure",
      "members":{
        "policyVersions":{"shape":"PolicyVersions"},
        "nextMarker":{"shape":"Marker"}
      }
    },
    "ListPrincipalPoliciesRequest":{
      "type":"structure",
      "required":["principal"],
      "members":{
        "principal":{
          "shape":"Principal",
          "location":"header",
          "locationName":"x-amzn-iot-principal"
        },
        "marker":{
          "shape":"Marker",
          "location":"querystring",
          "locationName":"marker"
        },
        "pageSize":{
          "shape":"PageSize",
          "location":"querystring",
          "locationName":"pageSize"
        },
        "ascendingOrder":{
          "shape":"AscendingOrder",
          "location":"querystring",
          "locationName":"isAscendingOrder"
        }
      }
    },
    "ListPrincipalPoliciesResponse":{
      "type":"structure",
      "members":{
        "policies":{"shape":"Policies"},
        "nextMarker":{"shape":"Marker"}
      }
    },
    "ListPrincipalThingsRequest":{
      "type":"structure",
      "required":["principal"],
      "members":{
        "principal":{
          "shape":"PrincipalArn",
          "location":"header",
          "locationName":"x-amzn-principal-arn"
        }
      }
    },
    "ListPrincipalThingsResponse":{
      "type":"structure",
      "members":{
        "things":{"shape":"ThingNameList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListThingPrincipalsRequest":{
      "type":"structure",
      "required":["thingName"],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        }
      }
    },
    "ListThingPrincipalsResponse":{
      "type":"structure",
      "members":{
        "principals":{"shape":"Principals"}
      }
    },
    "ListThingsRequest":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "maxResults":{
          "shape":"MaxResults",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "ascendingOrder":{
          "shape":"AscendingOrder",
          "location":"querystring",
          "locationName":"isAscendingOrder"
        },
        "attributeName":{
          "shape":"AttributeName",
          "location":"querystring",
          "locationName":"attributeName"
        },
        "attributeValue":{
          "shape":"AttributeValue",
          "location":"querystring",
          "locationName":"attributeValue"
        }
      }
    },
    "ListThingsResponse":{
      "type":"structure",
      "members":{
        "things":{"shape":"ThingAttributeList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListTopicRulesRequest":{
      "type":"structure",
      "members":{
        "topicPrefix":{
          "shape":"TopicPrefix",
          "location":"querystring",
          "locationName":"topicPrefix"
        },
        "maxResults":{
          "shape":"MaxResults",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "ruleDisabled":{
          "shape":"IsDisabled",
          "location":"querystring",
          "locationName":"ruleDisabled"
        }
      }
    },
    "ListTopicRulesResponse":{
      "type":"structure",
      "members":{
        "rules":{"shape":"TopicRuleList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "LoggingRolePayload":{
      "type":"structure",
      "required":["roleArn"],
      "members":{
        "roleArn":{"shape":"AwsArn"}
      }
    },
    "MalformedPolicyException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true,
      "documentation":"Thrown if the policy document does not validate a propen Aspen policy document."
    },
    "Marker":{"type":"string"},
    "MaxResults":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "NextToken":{"type":"string"},
    "PageSize":{"type":"integer"},
    "PartitionKey":{"type":"string"},
    "PayloadField":{"type":"string"},
    "Policies":{
      "type":"list",
      "member":{"shape":"Policy"}
    },
    "Policy":{
      "type":"structure",
      "members":{
        "policyName":{"shape":"PolicyName"},
        "policyArn":{"shape":"PolicyArn"}
      }
    },
    "PolicyArn":{
      "type":"string",
      "pattern":"arn:aws:iot:[a-z]{2}-[a-z]{4}-\\d{1}:\\d{12}:policy/?[a-zA-Z0-9]+"
    },
    "PolicyDocument":{"type":"string"},
    "PolicyName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]+"
    },
    "PolicyVersion":{
      "type":"structure",
      "members":{
        "versionId":{"shape":"PolicyVersionId"},
        "isDefaultVersion":{"shape":"IsDefaultVersion"},
        "createDate":{"shape":"DateType"}
      }
    },
    "PolicyVersionId":{
      "type":"string",
      "pattern":"[0-9]+"
    },
    "PolicyVersions":{
      "type":"list",
      "member":{"shape":"PolicyVersion"}
    },
    "Principal":{"type":"string"},
    "PrincipalArn":{
      "type":"string",
      "pattern":"arn:aws:iot:[a-z]{2}-[a-z]{4}-\\d{1}:\\d{12}:[a-zA-Z0-9]+/?[a-zA-Z0-9]+"
    },
    "Principals":{
      "type":"list",
      "member":{"shape":"PrincipalArn"}
    },
    "PrivateKey":{
      "type":"string",
      "min":1
    },
    "PublicKey":{
      "type":"string",
      "min":1
    },
    "QueueUrl":{"type":"string"},
    "RangeKeyField":{"type":"string"},
    "RangeKeyValue":{"type":"string"},
    "RejectCertificateTransferRequest":{
      "type":"structure",
      "required":["certificateId"],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        }
      }
    },
    "ReplaceTopicRuleRequest":{
      "type":"structure",
      "required":[
        "ruleName",
        "topicRulePayload"
      ],
      "members":{
        "ruleName":{
          "shape":"RuleName",
          "location":"uri",
          "locationName":"ruleName"
        },
        "topicRulePayload":{"shape":"TopicRulePayload"}
      },
      "payload":"topicRulePayload"
    },
    "RepublishAction":{
      "type":"structure",
      "required":[
        "roleArn",
        "topic"
      ],
      "members":{
        "roleArn":{"shape":"AwsArn"},
        "topic":{"shape":"TopicPattern"}
      }
    },
    "ResourceAlreadyExistsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true,
      "documentation":"Thrown when a request resource already exists."
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true,
      "documentation":"Thrown when a request resource was not found or does not exist."
    },
    "RuleName":{
      "type":"string",
      "max":128
    },
    "S3Action":{
      "type":"structure",
      "required":[
        "roleArn",
        "bucketName",
        "key"
      ],
      "members":{
        "roleArn":{"shape":"AwsArn"},
        "bucketName":{"shape":"BucketName"},
        "key":{"shape":"Key"}
      }
    },
    "SQL":{"type":"string"},
    "ServiceUnavailableException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":503},
      "exception":true,
      "fault":true,
      "documentation":"Indicates that the service is temporarily unavailable and caller can retry with backoff."
    },
    "SetAsActive":{"type":"boolean"},
    "SetAsDefault":{"type":"boolean"},
    "SetDefaultPolicyVersionRequest":{
      "type":"structure",
      "required":[
        "policyName",
        "policyVersionId"
      ],
      "members":{
        "policyName":{
          "shape":"PolicyName",
          "location":"uri",
          "locationName":"policyName"
        },
        "policyVersionId":{
          "shape":"PolicyVersionId",
          "location":"uri",
          "locationName":"policyVersionId"
        }
      }
    },
    "SnsAction":{
      "type":"structure",
      "required":[
        "targetArn",
        "roleArn"
      ],
      "members":{
        "targetArn":{"shape":"AwsArn"},
        "roleArn":{"shape":"AwsArn"}
      }
    },
    "SqlParseException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":509},
      "exception":true,
      "documentation":"This exception is thrown when a Rule-SQL expression does not parse correctly."
    },
    "SqsAction":{
      "type":"structure",
      "required":[
        "roleArn",
        "queueUrl"
      ],
      "members":{
        "roleArn":{"shape":"AwsArn"},
        "queueUrl":{"shape":"QueueUrl"},
        "useBase64":{"shape":"UseBase64"}
      }
    },
    "StreamName":{"type":"string"},
    "TableName":{"type":"string"},
    "ThingArn":{
      "type":"string",
      "pattern":"arn:aws:iot:[a-z]{2}-[a-z]{4}-\\d{1}:\\d{12}:thing/?[a-zA-Z0-9]+"
    },
    "ThingAttribute":{
      "type":"structure",
      "members":{
        "thingName":{"shape":"ThingName"},
        "attributes":{"shape":"Attributes"}
      }
    },
    "ThingAttributeList":{
      "type":"list",
      "member":{"shape":"ThingAttribute"}
    },
    "ThingName":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"[a-zA-Z0-9]+"
    },
    "ThingNameList":{
      "type":"list",
      "member":{"shape":"ThingName"}
    },
    "ThrottlingException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":429},
      "exception":true,
      "documentation":"Thrown if the client has exceeded their rate limit http://tools.ietf.org/html/rfc6585#page-3"
    },
    "TopicPattern":{"type":"string"},
    "TopicPrefix":{"type":"string"},
    "TopicRule":{
      "type":"structure",
      "members":{
        "ruleName":{"shape":"RuleName"},
        "sql":{"shape":"SQL"},
        "description":{"shape":"Description"},
        "createdAt":{"shape":"CreatedAtDate"},
        "actions":{"shape":"ActionList"},
        "functionConfigs":{"shape":"FunctionConfigList"},
        "ruleDisabled":{"shape":"IsDisabled"}
      }
    },
    "TopicRuleList":{
      "type":"list",
      "member":{"shape":"TopicRule"}
    },
    "TopicRulePayload":{
      "type":"structure",
      "required":[
        "sql",
        "actions"
      ],
      "members":{
        "sql":{"shape":"SQL"},
        "description":{"shape":"Description"},
        "actions":{"shape":"ActionList"},
        "functionConfigs":{"shape":"FunctionConfigList"},
        "ruleDisabled":{"shape":"IsDisabled"}
      }
    },
    "TransferAlreadyCompletedException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":410},
      "exception":true,
      "documentation":"Exception indicating a certificate transfer may not reverted since it has already been completed."
    },
    "TransferCertificateRequest":{
      "type":"structure",
      "required":[
        "certificateId",
        "targetAwsAccount"
      ],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        },
        "targetAwsAccount":{
          "shape":"AwsAccountId",
          "location":"querystring",
          "locationName":"targetAwsAccount"
        }
      }
    },
    "TransferCertificateResponse":{
      "type":"structure",
      "members":{
        "transferredCertificateArn":{"shape":"CertificateArn"}
      }
    },
    "TransferConflictException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true,
      "documentation":"Exception indicating a certificate transfer may not be initiated as authorization policies are still attached."
    },
    "UnauthorizedException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":401},
      "exception":true,
      "documentation":"Thrown if the client attempts to access a resource they are not allowed to"
    },
    "UpdateCertificateRequest":{
      "type":"structure",
      "required":[
        "certificateId",
        "newStatus"
      ],
      "members":{
        "certificateId":{
          "shape":"CertificateId",
          "location":"uri",
          "locationName":"certificateId"
        },
        "newStatus":{
          "shape":"CertificateStatus",
          "location":"querystring",
          "locationName":"newStatus"
        }
      }
    },
    "UpdateThingRequest":{
      "type":"structure",
      "required":["thingName"],
      "members":{
        "thingName":{
          "shape":"ThingName",
          "location":"uri",
          "locationName":"thingName"
        },
        "attributePayload":{"shape":"AttributePayload"}
      },
      "payload":"attributePayload"
    },
    "UpdateThingResponse":{
      "type":"structure",
      "members":{
      }
    },
    "UseBase64":{"type":"boolean"},
    "VersionsLimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true,
      "documentation":"Thrown if the number of versions of policy exceeds a limit."
    },
    "errorMessage":{"type":"string"}
  },
  "examples":{
  }
}
